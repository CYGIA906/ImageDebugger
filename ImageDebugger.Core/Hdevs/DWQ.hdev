<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.0.0">
<procedure name="main">
<interface/>
<body>
<l>* get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<l>* open_file ('C:/Users/25001885/Desktop/数据/'+Month+Day+Hour+Minute+Second+'.csv', 'output', FileHandleData)</l>
<l>* open_file ('C:/Users/25001885/Desktop/grayvalue1.csv', 'output', FileHandleDataGrayValue1)</l>
<l>* open_file ('C:/Users/25001885/Desktop/grayvalue2.csv', 'output', FileHandleDataGrayValue2)</l>
<l>* strPath:='G:/项目文件/1108/1107wen/dynamic/d1/'</l>
<l>* list_files (strPath+'2', ['files','follow_links'], ImageFilesTL)</l>
<l>* tuple_regexp_select (ImageFilesTL, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFilesTL)</l>
<l>* list_files (strPath+'3', ['files','follow_links'], ImageFilesTR)</l>
<l>* tuple_regexp_select (ImageFilesTR, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFilesTR)</l>
<l>* list_files (strPath+'1', ['files','follow_links'], ImageFilesB)</l>
<l>* tuple_regexp_select (ImageFilesB, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFilesB)</l>
<l>* gen_empty_obj (EmptyObject)</l>
<l>* for IndexLoop :=0 to 8 by 1</l>
<l>*     dev_update_off()</l>
<l>*     read_image (ProfileImageTLW, ImageFilesTL[IndexLoop])</l>
<l>*     read_image (ProfileImageTRW, ImageFilesTR[IndexLoop])</l>
<l>*     read_image (ProfileImageBW, ImageFilesB[IndexLoop])</l>
<c>    * 创建模板,初定位</c>
<l>*     read_shape_model ('G:/项目文件/1107/50shapemodel', ModelID)</l>
<l>*     get_location (ProfileImageTLW, ProfileImageTRW, ProfileImageBW, ImageNewTLW, ImageNewTRW, ImageNewBW, fit_contour, ImageUP, RegionB, ModelID, RowB, ColB, RowC, ColC)</l>
<c>    </c>
<l>*     intersection_lines (RowC[0], ColC[0], RowC[1], ColC[1], RowB[0], ColB[0], RowB[1], ColB[1], RowBC, ColumnBC, IsOverlappingBC)</l>
<l>*     gen_region_points (RegionBC, RowBC, ColumnBC)</l>
<c>    </c>
<l>*     scale_image(ImageUP, ImageUPShow, 0.001, 0)</l>
<l>*     scale_image_range(ImageUPShow, ImageUPShow, -5, 250)</l>
<l>*     intersection_lines (RowB[0], ColB[0], RowB[1], ColB[1], 0, 0, 1600, 0, Row1, Column1, IsOverlapping1)</l>
<l>*     intersection_lines (RowB[0], ColB[0], RowB[1], ColB[1], 0, 2400, 1600, 2400, Row2, Column2, IsOverlapping1) </l>
<l>*     gen_contour_polygon_xld (Contourb, [Row1,Row2], [Column1,Column2])</l>
<l>*     intersection_lines (0, 0, 0, 1600, RowC[0], ColC[0], RowC[1], ColC[1], Row3, Column3, IsOverlapping1)</l>
<l>*     intersection_lines (1600, 0, 1600, 800, RowC[0], ColC[0], RowC[1], ColC[1], Row4, Column4, IsOverlapping1)</l>
<l>*     gen_contour_polygon_xld (Contourc, [Row3,Row4], [Column3,Column4])</l>
<l>*     intersection_lines (Row3, Column3, Row4, Column4, Row1, Column1, Row2, Column2, Row, Column, IsOverlapping)</l>
<l>*     gen_region_points (Region, Row, Column)</l>
<l>*     concat_obj (EmptyObject, Region, EmptyObject)</l>
<l>*     dev_update_on()</l>
<l>*    dev_display (ImageNewTRW)</l>
<l>*    dev_display (Contourc)</l>
<l>*    dev_display (Contourb)</l>
<l>*    dev_set_color ('green')</l>
<l>*    dev_display (RegionB)</l>
<l>*    dev_display(EmptyObject)</l>
<l>*    dev_set_color ('red')</l>
<c>     *定义像素当量</c>
<l>*     sy:=12.35</l>
<l>*     sx:=14</l>
<l>*     PhiB:=0</l>
<c>    *********************FAI16-1检测***************************</c>
<l>*     x16_1A:=19.605-[7.120,7.120,4.540,-4.540,-6.940,-6.940,-4.540,4.540]</l>
<l>*     y16_1A:=6.788+[4.340,-4.340,-6.570,-6.570,-4.050,4.050,6.570,6.570]</l>
<l>*     x16_1F:=19.605-[18.170,18.170,10.390+0.3,10.390+0.3,6.120,6.120,2.440,-2.440,-4.770,-6.120,-6.120,-4.770,-2.440,2.440]</l>
<l>*     y16_1F:=6.788+[-3.890,3.890,3.890,-3.890,-0.980,0.980,-5.510,-5.510,-4.480,-0.980,0.980,4.480,5.510,5.510]</l>
<l>*     analyze_coordinate (x16_1A, y16_1A, PhiB, RowBC, ColumnBC, sx, sy, Output_xA, Output_yA)</l>
<l>*     analyze_coordinate (x16_1F, y16_1F, PhiB, RowBC, ColumnBC, sx, sy, Output_xF, Output_yF)</l>
<l>*     override_get_grayvalue (ImageUP, Output_yA, Output_xA, PhiB, 4, 'A', grayvaluesA)</l>
<c>        </c>
<l>*     fwrite_string(FileHandleDataGrayValue1,grayvaluesA[0]+','+grayvaluesA[1]+','+grayvaluesA[2]+','+grayvaluesA[3]+','+grayvaluesA[4]+','+grayvaluesA[5]+','+grayvaluesA[6]+','+grayvaluesA[7] )</l>
<l>*     fnew_line (FileHandleDataGrayValue1)</l>
<c>    </c>
<l>*     gen_cross_contour_xld (Cross1, Output_yA, Output_xA, 6, 60)</l>
<l>*     override_get_grayvalue (ImageNewBW, Output_yF, Output_xF, PhiB, 4, 'F', grayvaluesF)</l>
<c>        </c>
<l>*     fwrite_string(FileHandleDataGrayValue2,grayvaluesF[0]+','+grayvaluesF[1]+','+grayvaluesF[2]+','+grayvaluesF[3]+','+grayvaluesF[4]+','+grayvaluesF[5]+','+grayvaluesF[6]+','+grayvaluesF[7]+','+grayvaluesF[8]+','+grayvaluesF[9]+','+grayvaluesF[10]+','+grayvaluesF[11]+','+grayvaluesF[12]+','+grayvaluesF[13] )</l>
<l>*     fnew_line (FileHandleDataGrayValue2)</l>
<c>    </c>
<l>*     gen_cross_contour_xld (Cross2,Output_yF, Output_xF, 6, 60)</l>
<l>*     analyze_flatness (Output_yF, Output_xF, -5000-grayvaluesF, Output_yA, Output_xA, grayvaluesA, flatness, distance)</l>
<c>    *平行度测量</c>
<l>*     parallam16:=max(distance)-min(distance)</l>
<c>    *记录16——1结果</c>
<l>*     fwrite_string (FileHandleData, parallam16+',')</l>
<c>    </c>
<c>    *********************FAI16-2检测***************************</c>
<l>*     x16_2:=19.605-[-6.900,-6.970,-6.900,-6.970,-6.900,-6.970,-6.900,-6.970]</l>
<l>*     y16_2:=6.788+[-4.900,-4.300,-3.800,-3.200,3.200,3.800,4.300,4.900]</l>
<l>*     analyze_coordinate (x16_2, y16_2, PhiB, RowBC, ColumnBC, sx, sy, Output_x, Output_y)</l>
<l>*     override_get_grayvalue (ImageUP, Output_y, Output_x, PhiB, 4, 'A', grayvalues)</l>
<l>*     gen_region_points (Region3, Output_y, Output_x)</l>
<l>*     gen_cross_contour_xld (Cross3, Output_y, Output_x, 6, 0.785398)</l>
<l>*     analyze_flatness (Output_y, Output_x, grayvalues, [], [], [], flatness, distance)</l>
<c>    *记录16——2结果</c>
<l>*     fwrite_string (FileHandleData, flatness+',')</l>
<c>    </c>
<c>    *********************FAI16-3检测***************************</c>
<l>*     x16_3:=19.605-[-5.100,-4.500,-3.800,-3.200,3.200,3.800,4.500,5.100]</l>
<l>*     y16_3:=6.788+[6.550,6.6000,6.550,6.6000,6.550,6.6000,6.550,6.6000]</l>
<c>*     analyze_coordinate (x16_3, y16_3, PhiB, RowBC, ColumnBC, sx, sy, Output_x, Output_y)</c>
<c>*     override_get_grayvalue (ImageUP, Output_y, Output_x, PhiB, 4, , plane3, grayvalues)</c>
<l>*     gen_cross_contour_xld (Cross5, Output_y, Output_x, 6, 0.785398)</l>
<c>*     analyze_flatness_COPY_1 (Output_y, Output_x, grayvalues, [], [], [], flatness, distance)</c>
<c>    *********************FAI16-4检测***************************</c>
<c>    *8个点到B.C直线的距离</c>
<l>*     x16_4:=19.605-[6.900,6.970,6.900,6.970,6.900,6.970,6.900,6.970]</l>
<l>*     y16_4:=6.788+[-4.900,-4.300,-3.800,-3.200,3.200,3.800,4.300,4.900]</l>
<c>*     analyze_coordinate (x16_4, y16_4, PhiB, RowBC, ColumnBC, sx, sy, Output_x, Output_y)</c>
<c>*     override_get_grayvalue (ImageUP, Output_y, Output_x, PhiB, 5, , plane4, grayvalues)</c>
<l>*     gen_cross_contour_xld (Cross6,Output_y, Output_x, 6, 0.785398)</l>
<c>*     analyze_flatness_COPY_1 (Output_y, Output_x, grayvalues, [], [], [], flatness, distance)</c>
<c>    </c>
<c>    *********************FAI16-5检测***************************</c>
<c>    *8个点到B.C直线的距离</c>
<l>*     x16_5:=19.605-[-5.100,-4.500,-3.800,-3.200,3.200,3.800,4.500,5.100]</l>
<l>*     y16_5:=6.788+[-6.550,-6.6000,-6.550,-6.6000,-6.550,-6.6000,-6.550,-6.6000]</l>
<c>*     analyze_coordinate (x16_5, y16_5, PhiB, RowBC, ColumnBC, sx, sy, Output_x, Output_y)</c>
<c>*     override_get_grayvalue (ImageUP, Output_y, Output_x, PhiB, 5, , plane5, grayvalues)</c>
<l>*     gen_cross_contour_xld (Cross7, Output_y, Output_x, 6, 0.785398)</l>
<c>*     analyze_flatness_COPY_1 (Output_y, Output_x, grayvalues, [], [], [], flatness, distance)</c>
<c>    </c>
<c>    *********************FAI18C检测***************************</c>
<l>*     x18CA:=19.605-[7.120,7.120,4.540,-4.540,-6.940,-6.940,-4.540,4.540]</l>
<l>*     y18CA:=6.788+[4.340,-4.340,-6.570,-6.570,-4.050,4.050,6.570,6.570]</l>
<l>*     x18CE:=19.605-[5.220,5.220,-5.220+0.3,-5.220+0.3]</l>
<l>*     y18CE:=6.788+[1.520,-1.520,-1.520,1.520]</l>
<l>*     analyze_coordinate (x18CA, y18CA, PhiB, RowBC, ColumnBC, sx, sy, Output_xA, Output_yA)</l>
<l>*     analyze_coordinate (x18CE, y18CE, PhiB, RowBC, ColumnBC, sx, sy, Output_xE, Output_yE)</l>
<l>*     override_get_grayvalue (ImageUP, Output_yA, Output_xA, PhiB, 8, 'A', grayvaluesA)</l>
<c>    </c>
<l>*     gen_cross_contour_xld (Cross, Output_yA, Output_xA, 6, 0.785398)</l>
<l>*     override_get_grayvalue (ImageUP, Output_yE, Output_xE, PhiB, 4, 'E', grayvaluesE)</l>
<c>    </c>
<l>*     gen_region_points (Region3, Output_yE, Output_xE)</l>
<l>*     gen_cross_contour_xld (Cross4, Output_yE, Output_xE, 6, 0.785398)</l>
<l>*     analyze_flatness (Output_yA, Output_xA, grayvaluesA, Output_yE, Output_xE, grayvaluesE, flatness, distance)</l>
<c>    *轮廓度计算</c>
<l>*     pos1:=2*max(abs(2.612-distance))</l>
<c>    *记录18C结果</c>
<l>*     fwrite_string (FileHandleData, pos1+',')</l>
<c>    </c>
<c>    *********************FAI18M检测***************************</c>
<l>*     x18MA:=19.605-[7.120,7.120,4.540,-4.540,-6.940,-6.940,-4.540,4.540]</l>
<l>*     y18MA:=6.788+[4.340,-4.340,-6.570,-6.570,-4.050,4.050,6.570,6.570]</l>
<l>*     x18ME:=19.605-[4.770,6.120,6.120,4.770,2.440,-2.440,-4.770,-6.120,-6.120,-4.770,-2.440,2.440]</l>
<l>*     y18ME:=6.788+[4.480,0.980,-0.980,-4.480,-5.510,-5.510,-4.480,-0.980,0.980,4.480,5.510,5.510]</l>
<l>*     analyze_coordinate (x18MA, y18MA, PhiB, RowBC, ColumnBC, sx, sy, Output_xA, Output_yA)</l>
<l>*     analyze_coordinate (x18ME, y18ME, PhiB, RowBC, ColumnBC, sx, sy, Output_xE, Output_yE)</l>
<l>*     override_get_grayvalue (ImageUP, Output_yA, Output_xA, PhiB, 8, 'A', grayvaluesA)</l>
<l>*     gen_cross_contour_xld (Cross3, Output_yA, Output_xA, 6, 0.785398)</l>
<l>*     override_get_grayvalue (ImageUP, Output_yE, Output_xE, PhiB, 4, 'E', grayvaluesE)</l>
<l>*     gen_cross_contour_xld (Cross5, Output_yE, Output_xE, 6, 0.785398)</l>
<l>*     analyze_flatness (Output_yA, Output_xA, grayvaluesA, Output_yE, Output_xE, grayvaluesE, flatness, distance)</l>
<c>    *计算轮廓度</c>
<l>*     selectRows:=[]</l>
<l>*     selectCols:=[]</l>
<l>*     tuple1:=[abs(2.612-distance[0]),abs(2.612-distance[1]),abs(2.612-distance[11])]</l>
<l>*     pos21:=2*max(tuple1)</l>
<c>    </c>
<l>*     tuple2:=[abs(2.612-distance[2]),abs(2.612-distance[3]),abs(2.612-distance[4])]</l>
<l>*     pos22:=2*max(tuple2)</l>
<c>    </c>
<l>*     tuple3:=[abs(2.612-distance[5]),abs(2.612-distance[6]),abs(2.612-distance[7])]</l>
<l>*     pos23:=2*max(tuple3)</l>
<c>      </c>
<l>*     tuple4:=[abs(2.612-distance[8]),abs(2.612-distance[9]),abs(2.612-distance[10])]</l>
<l>*     pos24:=2*max(tuple4)</l>
<c></c>
<c>    *记录18CM结果</c>
<l>*     fwrite_string (FileHandleData, pos21+','+pos22+','+pos23+','+pos24+',')    </l>
<c>    </c>
<c>    *********************FAI20检测***************************</c>
<l>*     x20F:=19.605-[18.170,18.170,10.390+0.3,10.390+0.3]</l>
<l>*     y20F:=6.788+[-3.890,3.890,3.890,-3.890]</l>
<l>*     x20P:=19.605-[18.170,18.170,10.390+0.3,10.390+0.3]</l>
<l>*     y20P:=6.788+[-3.890,3.890,3.890,-3.890]</l>
<l>*     analyze_coordinate (x20F, y20F, PhiB, RowBC, ColumnBC, sx, sy, Output_xF, Output_yF)</l>
<l>*     analyze_coordinate (x20P, y20P, PhiB, RowBC, ColumnBC, sx, sy, Output_xP, Output_yP)</l>
<l>*     override_get_grayvalue (ImageNewBW, Output_yF, Output_xF, PhiB, 4, 'F', grayvaluesF)</l>
<l>*     gen_cross_contour_xld (Cross6, Output_yF, Output_xF, 6, 0.785398)</l>
<l>*     override_get_grayvalue (ImageUP, Output_yP, Output_xP, PhiB, 4, 'P', grayvaluesP)</l>
<l>*     gen_cross_contour_xld (Cross7, Output_yP, Output_xP, 6, 0.785398)</l>
<c>    *计算四点对应的距离,5000是标定板厚度</c>
<c></c>
<l>*     distance20:=((5000+grayvaluesP)+grayvaluesF)/1000</l>
<c>    *记录20结果</c>
<l>*     fwrite_string (FileHandleData, distance20[0]+','+distance20[1]+','+distance20[2]+','+distance20[3]+',')</l>
<c>    </c>
<c>    *********************FAI21检测***************************</c>
<l>*     x21F:=19.605-[18.170,18.170,10.390+0.3,10.390+0.3,6.120,6.120,2.440,-2.440,-4.770,-6.120,-6.120,-4.770,-2.440,2.440]</l>
<l>*     y21F:=6.788+[-3.890,3.890,3.890,-3.890,-0.980,0.980,-5.510,-5.510,-4.480,-0.980,0.980,4.480,5.510,5.510]</l>
<l>*     analyze_coordinate (x21F, y21F, PhiB, RowBC, ColumnBC, sx, sy, Output_xF, Output_yF)</l>
<l>*     override_get_grayvalue (ImageNewBW, Output_yF, Output_xF, PhiB, 4,  'F', grayvaluesF)</l>
<l>*     gen_cross_contour_xld (Cross8, Output_yF, Output_xF, 6, 0.785398)</l>
<c>    *计算平整度flatness</c>
<l>*     analyze_flatness (Output_yF, Output_xF, grayvaluesF, [], [], [], flatness, distance)</l>
<c>    *记录21结果</c>
<l>*     fwrite_string (FileHandleData, flatness+',')</l>
<c>    </c>
<c>    *********************FAI22检测***************************</c>
<l>*     x22A:=19.605-[7.120,7.120,4.540,-4.540,-6.940,-6.940,-4.540,4.540]</l>
<l>*     y22A:=6.788+[4.340,-4.340,-6.570,-6.570,-4.050,4.050,6.570,6.570]</l>
<c>    *由于跨边界  修改点位 以下为原始点位</c>
<l>*     x22P:=19.605-[18.170,18.170,10.390,10.390]</l>
<l>*     y22P:=6.788+[3.890,-3.890,-3.890,3.890]</l>
<c>    </c>
<l>*     x22P:=19.605-[18.170,18.170,10.390+0.2,10.390+0.2]</l>
<l>*     y22P:=6.788+[3.890,-3.890,-3.890,3.890]</l>
<l>*     analyze_coordinate (x22A, y22A, PhiB, RowBC, ColumnBC, sx, sy, Output_xA, Output_yA)</l>
<l>*     analyze_coordinate (x22P, y22P, PhiB, RowBC, ColumnBC, sx, sy, Output_xP, Output_yP)</l>
<l>*     override_get_grayvalue (ImageUP, Output_yA, Output_xA, PhiB, 8, 'A', grayvaluesA)</l>
<l>*     gen_cross_contour_xld (Cross9, Output_yA, Output_xA, 6, 0.785398)</l>
<c></c>
<l>*     override_get_grayvalue (ImageUP, Output_yP, Output_xP, PhiB, 4, 'P', grayvaluesP)</l>
<l>*     gen_region_points (Region3, Output_yP, Output_xP)</l>
<c></c>
<l>*     gen_cross_contour_xld (Cross10, Output_yP, Output_xP, 6, 0.785398)</l>
<l>*     analyze_flatness (Output_yA, Output_xA, grayvaluesA, Output_yP, Output_xP, grayvaluesP, flatness, distance)</l>
<c>    *平行度测量</c>
<l>*     parallam22:=max(distance)-min(distance)</l>
<c>    *记录22结果</c>
<l>*     fwrite_string (FileHandleData, parallam22)</l>
<l>*     fnew_line (FileHandleData)</l>
<c>         </c>
<l>* endfor</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="get_location">
<interface>
<io>
<par name="ProfileImageTLW" base_type="iconic" dimension="0"/>
<par name="ProfileImageTRW" base_type="iconic" dimension="0"/>
<par name="ProfileImageBW" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ImageNewTLW" base_type="iconic" dimension="0"/>
<par name="ImageNewTRW" base_type="iconic" dimension="0"/>
<par name="ImageNewBW" base_type="iconic" dimension="0"/>
<par name="fit_contour" base_type="iconic" dimension="0"/>
<par name="ImageUP" base_type="iconic" dimension="0"/>
<par name="RegionB" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="ModelID" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="RowB" base_type="ctrl" dimension="0"/>
<par name="ColB" base_type="ctrl" dimension="0"/>
<par name="RowC" base_type="ctrl" dimension="0"/>
<par name="ColC" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c>*左侧和下侧图片要旋转才可以达到，加W结尾的才是最终输出图片</c>
<c>* ****************矫正I40TL照片</c>
<l>get_ImageTL (ProfileImageTLW, ImageNewTL, ImageTLWToByte)</l>
<c>* 矫正I40TR照片</c>
<l>get_ImageTR (ProfileImageTRW, ImageNewTRW, ImageTRWToByte)</l>
<c>* ****************矫正I40B照片</c>
<l>get_ImageB (ProfileImageBW, ImageNewB, ImageBWToByte)</l>
<c>* **********************合并上面两张图</c>
<l>*gen_rectangle1 (ROI_0, 195.762, 539.958, 1130.34, 924.691)</l>
<l>* gen_rectangle1 (ROI_0, 193.769, 606.164, 1109.66, 896.676)</l>
<l>* gen_rectangle1 (TMP_Region, 283.488, 1660.91, 1023.68, 1899.08)</l>
<l>* union2 (ROI_0, TMP_Region, ROI_0)</l>
<l>* reduce_domain (ImageTRWToByte, ROI_0, ImageReduced)</l>
<l>* create_shape_model (ImageReduced, 'auto', -0.39, 0.79, 'auto', 'auto', 'use_polarity', 'auto', 'auto', ModelID1)</l>
<l>* write_shape_model (ModelID1, 'G:/项目文件/1107/50shapemodel')</l>
<c>*针对每个工件正反面定位</c>
<l>dev_display (ImageTRWToByte)</l>
<l>find_shape_model (ImageTRWToByte, ModelID, -0.39, 0.79, 0.2, 1, 0.5, 'least_squares', 0, 0.9, RowTLW, ColumnTLW, AngleTLW, ScoreTLW)</l>
<l>gen_rectangle1 (ROI_1, RowTLW-485, ColumnTLW-570, RowTLW+480, ColumnTLW-230)</l>
<l>gen_rectangle1 (ROI_2, RowTLW-380, ColumnTLW+400, RowTLW+390, ColumnTLW+780)</l>
<l>union2 (ROI_1, ROI_2, ROI_0)</l>
<l>reduce_domain (ImageTRWToByte, ROI_0, ImageReducedMS)</l>
<l>inspect_shape_model (ImageReducedMS, ModelImages, ModelRegions, 4, 30)</l>
<l>create_shape_model (ImageReducedMS, 4, -0.39, 0.79, 'auto', 'auto', 'use_polarity', 'auto', 'auto', ModelIDMS)</l>
<c>* 找模板，找旋转中心</c>
<l>find_shape_model (ImageTRWToByte, ModelIDMS, -1, 1, 0.5, 1, 0.5, 'least_squares', 2, 0.9, RowTR, ColumnTR, AngleTR, ScoreTR)</l>
<l>dev_display (ImageTRWToByte)</l>
<l>dev_display_shape_matching_results (ModelIDMS, 'red', RowTR, ColumnTR, AngleTR, 1, 1, 0)</l>
<l>find_shape_model (ImageTLWToByte, ModelIDMS, -1, 1, 0.3, 1, 0.5, 'least_squares', 2, 0.9, RowTL, ColumnTL, AngleTL, ScoreTL)</l>
<l>dev_display (ImageTLWToByte)</l>
<l>dev_display_shape_matching_results (ModelIDMS, 'red', RowTL, ColumnTL, AngleTL, 1, 1, 0)</l>
<c>* 旋转TL矫正镜像图片照片</c>
<l>vector_angle_to_rigid (RowTL, ColumnTL, AngleTL,RowTR, ColumnTR, AngleTR,  HomMat2D)</l>
<l>affine_trans_image (ImageNewTL, ImageNewTLW, HomMat2D, 'constant', 'false')</l>
<l>get_ImageUP (ImageNewTRW, ImageNewTLW, ImageUP)</l>
<c>* 底面旋转到检测位置</c>
<l>find_shape_model (ImageBWToByte, ModelIDMS, -1, 1, 0.2, 1, 0.3, 'least_squares', 2, 0.9, RowB, ColB, AngleB, Score2)</l>
<l>dev_display (ImageBWToByte)</l>
<l>dev_display_shape_matching_results (ModelIDMS, 'red', RowB, ColB, AngleB, 1, 1, 0)</l>
<l>vector_angle_to_rigid (RowB, ColB, AngleB, RowTR, ColumnTR, AngleTR, HomMat2D)</l>
<l>affine_trans_image (ImageNewB, ImageNewBW, HomMat2D, 'constant', 'false')</l>
<l>threshold (ImageNewBW, Region, -11128, 255)</l>
<c>* 创建模板</c>
<l>* gen_rectangle1 (ROI_0, 237.934, 181.275, 1140.4, 306.398)</l>
<l>* reduce_domain (ImageTLWToByte, ROI_0, ImageReducedMS)</l>
<l>* inspect_shape_model (ImageReducedMS, ModelImages, ModelRegions, 4, 50)</l>
<l>* create_shape_model (ImageReducedMS, 4, -0.39, 0.79, 'auto', 'auto', 'use_polarity', 'auto', 'auto', ModelIDL)</l>
<c>* 找模板，找旋转中心</c>
<l>* find_shape_model (ImageTLWToByte, ModelIDMS, -1, 1, 0.5, 1, 0.3, 'least_squares', 2, 0.9, RowL, ColumnL, AngleL, ScoreTL)</l>
<l>* dev_display (ImageTLWToByte)</l>
<l>* dev_display_shape_matching_results (ModelID, 'red', RowTL, ColumnTL, AngleTL, 1, 1, 0)</l>
<c>*获取定位线</c>
<l>get_located_line (ImageNewTRW, RowTR, ColumnTR, PhiStd)</l>
<c>* 生成基准垂线</c>
<l>* RowM := (RowBeginStd+RowEndStd)/2</l>
<l>* ColM := (ColBeginStd+ColEndStd)/2</l>
<c>* ********************生成垂线**************************垂线长度</c>
<l>* LineLength := 200</l>
<c>* 起点</c>
<l>* RowStartV := RowM-cos(PhiStd)*LineLength</l>
<l>* ColStartV := ColM-sin(PhiStd)*LineLength</l>
<c>* 终点</c>
<l>* RowEndV := RowM+cos(PhiStd)*LineLength</l>
<l>* ColEndV := ColM+sin(PhiStd)</l>
<c>* LineLength</c>
<l>* line_orientation (RowStartV, RowStartV, RowEndV, ColEndV, PhiV)</l>
<l>* gen_contour_polygon_xld (ContourV, [RowStartV,RowEndV], [ColStartV,ColEndV])</l>
<c></c>
<c>* 生成B条线</c>
<l>gen_B_line (ImageNewTRW, OrginLineB, RowTR, ColumnTR, RowBeginB, ColBeginB, RowEndB, ColEndB)</l>
<c>* 校准B线</c>
<l>line_orientation (RowBeginB, ColBeginB, RowEndB, ColEndB, PhiB)</l>
<l>vector_angle_to_rigid ((RowBeginB+RowEndB)/2, (ColBeginB+ColEndB)/2, PhiB, (RowBeginB+RowEndB)/2, (ColBeginB+ColEndB)/2, 0, HomMat2DB)</l>
<l>affine_trans_contour_xld (OrginLineB, LineB, HomMat2DB)</l>
<l>get_contour_xld (LineB, RowB, ColB)</l>
<l>orientation_xld (LineB, PhiBB)</l>
<c>* 生成C条线</c>
<l>get_C_line (ImageNewTRW, OrginLineC, RowTR, ColumnTR, RowBeginC, ColBeginC, RowEndC, ColEndC)</l>
<c>* 校准C线</c>
<l>line_orientation (RowBeginC, ColBeginC, RowEndC, ColEndC, PhiC)</l>
<l>vector_angle_to_rigid ((RowBeginC+RowEndC)/2, (ColBeginC+ColEndC)/2, PhiC, (RowBeginC+RowEndC)/2, (ColBeginC+ColEndC)/2, rad(90), HomMat2DC)</l>
<l>affine_trans_contour_xld (OrginLineC, LineC, HomMat2DC)</l>
<l>get_contour_xld (LineC, RowC, ColC)</l>
<l>orientation_xld (LineC, PhiCC)</l>
<l>gen_empty_obj (fit_contour)</l>
<c>*显示B台阶面</c>
<l>gen_rectangle1 (ROI_BR, RowTR+520, ColumnTR-930, RowTR+550, ColumnTR-40)</l>
<l>reduce_domain (ImageUP, ROI_BR, ImageReduced)</l>
<l>threshold (ImageReduced, RegionB, -2000, -1600)</l>
<l>return ()</l>
<c></c>
</body>
<docu id="get_location">
<parameters>
<parameter id="ColB"/>
<parameter id="ColC"/>
<parameter id="ImageNewBW"/>
<parameter id="ImageNewTLW"/>
<parameter id="ImageNewTRW"/>
<parameter id="ImageUP"/>
<parameter id="ModelID"/>
<parameter id="ProfileImageBW"/>
<parameter id="ProfileImageTLW"/>
<parameter id="ProfileImageTRW"/>
<parameter id="RegionB"/>
<parameter id="RowB"/>
<parameter id="RowC"/>
<parameter id="fit_contour"/>
</parameters>
</docu>
</procedure>
<procedure name="get_ImageTL">
<interface>
<io>
<par name="ProfileImageTLW" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ImageNewTLW" base_type="iconic" dimension="0"/>
<par name="ImageTLWToByte" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>convert_image_type (ProfileImageTLW, ImageTLWConverted, 'int4')</l>
<l>scale_image (ImageTLWConverted, ImageTLWScaled, 1, -32768)</l>
<l>scale_image (ImageTLWScaled, ImageTLWScaled, 1.6, 0)</l>
<l>scale_image (ImageTLWScaled, ImageTLWScaled, 1, 0)</l>
<l>* get_image_size (ImageTLWScaled, WidthPITLW, HeightPITLW)</l>
<l>* gen_image_const (ImageNewTempTLW, 'int4', WidthPITLW, HeightPITLW)</l>
<l>* for Index := 0 to HeightPITLW-1 by 1</l>
<l>*     get_grayval (ImageTLWScaled, gen_tuple_const(WidthPITLW,Index), [0:WidthPITLW-1], grayValuePITLWBefore)</l>
<l>*     grayValuePITLW := grayValuePITLWBefore[0:WidthPITLW-1]-([0:WidthPITLW-1]*kTL+bTL)</l>
<l>*     set_grayval (ImageNewTempTLW, gen_tuple_const(WidthPITLW,Index), [0:WidthPITLW-1], grayValuePITLW)</l>
<l>* endfor</l>
<l>mirror_image (ImageTLWScaled, ImageNewTLWMirror, 'column')</l>
<l>convert_image_type (ImageNewTLWMirror, ImageNewTLWConvert, 'int2')</l>
<l>rotate_image (ImageNewTLWConvert, ImageNewTLW, 90, 'constant')</l>
<c></c>
<l>mirror_image (ProfileImageTLW, ImageTLWMirror, 'column')</l>
<l>rotate_image (ImageTLWMirror, ImageRotateTLW, 90, 'constant')</l>
<l>convert_image_type (ImageRotateTLW, ImageTLWToByte, 'byte')</l>
<c></c>
<l>return ()</l>
</body>
<docu id="get_ImageTL">
<parameters>
<parameter id="ImageNewTLW"/>
<parameter id="ImageTLWToByte"/>
<parameter id="ProfileImageTLW"/>
</parameters>
</docu>
</procedure>
<procedure name="get_ImageTR">
<interface>
<io>
<par name="ProfileImageTRW" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ImageNewTRW" base_type="iconic" dimension="0"/>
<par name="ImageTRWToByte" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>convert_image_type (ProfileImageTRW, ImagePITRWConverted, 'int4')</l>
<l>scale_image (ImagePITRWConverted, ImageTRWScaled, 1, -32768)</l>
<l>scale_image (ImageTRWScaled, ImageTRWScaled, 1.6, 0)</l>
<l>* get_image_size (ImageTRWScaled, WidthPITRW, HeightPITRW)</l>
<l>* gen_image_const (ImageNewTempTRW, 'int4', WidthPITRW, HeightPITRW)</l>
<l>* for Index := 0 to HeightPITRW-1 by 1</l>
<l>*     get_grayval (ImageTRWScaled, gen_tuple_const(WidthPITRW,Index), [0:WidthPITRW-1], grayValuePITRWBefore)</l>
<l>*     grayValuePITRW := grayValuePITRWBefore[0:WidthPITRW-1]-([0:WidthPITRW-1]*kTR+bTR)</l>
<l>*     set_grayval (ImageNewTempTRW, gen_tuple_const(WidthPITRW,Index), [0:WidthPITRW-1], grayValuePITRW)</l>
<l>* endfor</l>
<l>convert_image_type (ImageTRWScaled, ImageNewTRWConvert, 'int2')</l>
<l>mirror_image (ImageNewTRWConvert, ImageNewTRWMirror, 'column')</l>
<l>rotate_image (ImageNewTRWMirror, ImageNewTRW, 90, 'constant')</l>
<c></c>
<l>mirror_image (ProfileImageTRW, ImageTRWMirror, 'column')</l>
<l>rotate_image (ImageTRWMirror, ImageRotateTRM, 90, 'constant')</l>
<l>convert_image_type (ImageRotateTRM, ImageTRWToByte, 'byte')</l>
<l>return ()</l>
</body>
<docu id="get_ImageTR">
<parameters>
<parameter id="ImageNewTRW"/>
<parameter id="ImageTRWToByte"/>
<parameter id="ProfileImageTRW"/>
</parameters>
</docu>
</procedure>
<procedure name="get_ImageB">
<interface>
<io>
<par name="ProfileImageBW" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ImageNewB" base_type="iconic" dimension="0"/>
<par name="ImageBWToByte" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>convert_image_type (ProfileImageBW, ImageBWConverted, 'int4')</l>
<l>scale_image (ImageBWConverted, ImageBWScaled, 1, -32768)</l>
<l>scale_image (ImageBWScaled, ImageBWScaled, 1.6, 0)</l>
<l>* get_image_size (ImageBWScaled, WidthB, HeightB)</l>
<l>* gen_image_const (ImageNewTempBW, 'int4', WidthB, HeightB)</l>
<l>* for Index := 0 to HeightB-1 by 1</l>
<l>*     get_grayval (ImageBWScaled, gen_tuple_const(WidthB,Index), [0:WidthB-1], grayValueBefore)</l>
<l>*     grayValue := grayValueBefore[0:WidthB-1]-([0:WidthB-1]*kB+bB)</l>
<l>*     set_grayval (ImageNewTempBW, gen_tuple_const(WidthB,Index), [0:WidthB-1], grayValue)</l>
<l>* endfor</l>
<l>* mirror_image (ImageBWScaled, ImageNewBWMirror, 'column')</l>
<l>convert_image_type (ImageBWScaled, ImageNewBWConvert, 'int2')</l>
<l>rotate_image (ImageNewBWConvert, ImageNewB, 90, 'constant')</l>
<c></c>
<l>convert_image_type (ProfileImageBW, ImageBWConverted, 'byte')</l>
<l>*mirror_image (ProfileImageBW, ImageBWMirror, 'column')</l>
<l>rotate_image (ImageBWConverted, ImageBWToByte, 90, 'constant')</l>
<c></c>
<l>return ()</l>
</body>
<docu id="get_ImageB">
<parameters>
<parameter id="ImageBWToByte"/>
<parameter id="ImageNewB"/>
<parameter id="ProfileImageBW"/>
</parameters>
</docu>
</procedure>
<procedure name="get_ImageUP">
<interface>
<io>
<par name="ImageNewTRW" base_type="iconic" dimension="0"/>
<par name="NewImageNewTLW" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ImageUP" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>threshold (ImageNewTRW, Region, -128000, -25500)</l>
<l>connection (Region, ConnectedRegions)</l>
<l>select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 99577.5, 2000000)</l>
<l>opening_circle (SelectedRegions, RegionOpening, 9)</l>
<l>dilation_circle (RegionOpening, RegionDilation, 3)</l>
<l>union1 (RegionDilation, RegionUnion)</l>
<l>reduce_domain (NewImageNewTLW, RegionUnion, ImageReduced)</l>
<l>paint_gray (ImageReduced, ImageNewTRW, ImageUP)</l>
<l>return ()</l>
</body>
<docu id="get_ImageUP">
<parameters>
<parameter id="ImageNewTRW"/>
<parameter id="ImageUP"/>
<parameter id="NewImageNewTLW"/>
</parameters>
</docu>
</procedure>
<procedure name="get_located_line">
<interface>
<io>
<par name="ImageNewTRW" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="RowL" base_type="ctrl" dimension="0"/>
<par name="ColumnL" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PhiStd" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>gen_rectangle1 (ROI_0, RowL-260, ColumnL+10, RowL+270, ColumnL+40)</l>
<l>reduce_domain (ImageNewTRW, ROI_0, ImageReduced)</l>
<l>threshold (ImageReduced, RegionStd, -2050, 4095)</l>
<l>closing_rectangle1 (RegionStd, RegionClosing, 1, 15)</l>
<c></c>
<l>opening_rectangle1 (RegionClosing, RegionOpeningStd, 1, 5)</l>
<c></c>
<l>boundary (RegionOpeningStd, RegionBorderStd, 'inner')</l>
<l>gen_contour_region_xld (RegionBorderStd, ContourStds, 'border')</l>
<l>segment_contours_xld (ContourStds, ContourStdsSplit, 'lines', 5, 1, 1)</l>
<l>select_contours_xld (ContourStdsSplit, SelectedContourStds, 'contour_length', 20, 2000, -0.5, 0.5)</l>
<l>union_collinear_contours_ext_xld (SelectedContourStds, UnionContourStds, 200, 7, 7, 0.5, 0, -1, 1, 1, 1, 1, 1, 0, 'attr_keep')</l>
<l>select_contours_xld (UnionContourStds, SelectedContourStds, 'contour_length', 80, 2000, -0.5, 0.5)</l>
<l>sort_contours_xld (SelectedContourStds, SortedContourStds, 'character', 'true', 'row')</l>
<l>select_obj (SortedContourStds, ObjectSelectedStd, 1)</l>
<l>fit_line_contour_xld (ObjectSelectedStd, 'drop', -1, 2, 10, 1, RowBeginStd, ColBeginStd, RowEndStd, ColEndStd, NrC, NcC, DistC)</l>
<l>gen_contour_polygon_xld (ContourStd, [RowBeginStd,RowEndStd], [ColBeginStd,ColEndStd])</l>
<c></c>
<l>line_orientation (RowBeginStd, ColBeginStd, RowEndStd, ColEndStd, PhiStd)</l>
<l>return ()</l>
</body>
<docu id="get_located_line">
<parameters>
<parameter id="ColumnL"/>
<parameter id="ImageNewTRW"/>
<parameter id="PhiStd"/>
<parameter id="RowL"/>
</parameters>
</docu>
</procedure>
<procedure name="gen_B_line">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="OrginLineB" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="RowL" base_type="ctrl" dimension="0"/>
<par name="ColumnL" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="RowBeginB" base_type="ctrl" dimension="0"/>
<par name="ColBeginB" base_type="ctrl" dimension="0"/>
<par name="RowEndB" base_type="ctrl" dimension="0"/>
<par name="ColEndB" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>gen_rectangle1 (ROI_B, RowL+520, ColumnL-800, RowL+560, ColumnL-100)</l>
<l>reduce_domain (Image, ROI_B, ImageReducedB)</l>
<l>threshold (ImageReducedB, RegionB, -2200, -1800)</l>
<l>closing_rectangle1 (RegionB, RegionBlosing2, 35, 1)</l>
<l>boundary (RegionBlosing2, RegionBorderB, 'inner')</l>
<l>gen_contour_region_xld (RegionBorderB, ContourBs, 'border')</l>
<l>segment_contours_xld (ContourBs, ContourBsSplit, 'lines', 5, 1, 1)</l>
<l>select_contours_xld (ContourBsSplit, SelectedContourBs, 'contour_length', 15, 2000, -0.5, 0.5)</l>
<l>union_collinear_contours_xld (SelectedContourBs, UnionContourBs, 100, 5, 5, 0.5, 'attr_keep')</l>
<l>select_contours_xld (UnionContourBs, SelectedContours, 'contour_length', 50, 2000, -0.5, 0.5)</l>
<l>sort_contours_xld (SelectedContours, SortedContourBs, 'character', 'true', 'column')</l>
<l>count_obj (SortedContourBs, Number)</l>
<l>select_obj (SortedContourBs, ObjectSelectedB, Number)</l>
<l>fit_line_contour_xld (ObjectSelectedB, 'drop', -1, 0, 5, 1, RowBeginB, ColBeginB, RowEndB, ColEndB, NrC, NcC, DistC)</l>
<l>gen_contour_polygon_xld (OrginLineB, [RowBeginB,RowEndB], [ColBeginB,ColEndB])</l>
<l>return ()</l>
</body>
<docu id="gen_B_line">
<parameters>
<parameter id="ColBeginB"/>
<parameter id="ColEndB"/>
<parameter id="ColumnL"/>
<parameter id="Image"/>
<parameter id="OrginLineB"/>
<parameter id="RowBeginB"/>
<parameter id="RowEndB"/>
<parameter id="RowL"/>
</parameters>
</docu>
</procedure>
<procedure name="get_C_line">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="OrginLineC" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="RowL" base_type="ctrl" dimension="0"/>
<par name="ColumnL" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="RowBeginC" base_type="ctrl" dimension="0"/>
<par name="ColBeginC" base_type="ctrl" dimension="0"/>
<par name="RowEndC" base_type="ctrl" dimension="0"/>
<par name="ColEndC" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>gen_rectangle1 (ROI_C, RowL-270, ColumnL+925, RowL+270, ColumnL+955)</l>
<l>reduce_domain (Image, ROI_C, ImageReducedC)</l>
<l>threshold (ImageReducedC, RegionC, -2200, -600)</l>
<l>closing_rectangle1 (RegionC, RegionClosing2, 1, 5)</l>
<l>opening_rectangle1 (RegionClosing2, RegionOpening, 2, 10)</l>
<l>connection (RegionOpening, ConnectedRegions)</l>
<l>select_shape_std (ConnectedRegions, SelectedRegions, 'max_area', 70)</l>
<l>boundary (SelectedRegions, RegionBorderC, 'inner')</l>
<l>gen_contour_region_xld (RegionBorderC, ContourCs, 'border')</l>
<l>segment_contours_xld (ContourCs, ContourCsSplit, 'lines', 5, 1, 1)</l>
<l>select_contours_xld (ContourCsSplit, SelectedContourCs, 'contour_length', 20, 2000, -0.5, 0.5)</l>
<l>union_collinear_contours_xld (SelectedContourCs, UnionContourCs, 100, 10, 10, 0.5, 'attr_keep')</l>
<l>select_contours_xld (UnionContourCs, SelectedContourCs, 'contour_length', 50, 2000, -0.5, 0.5)</l>
<l>sort_contours_xld (SelectedContourCs, SortedContourCs, 'character', 'true', 'row')</l>
<l>select_obj (SortedContourCs, ObjectSelectedC, 2)</l>
<l>union_collinear_contours_xld (ObjectSelectedC, UnionContours1, 1000, 20, 20, 0.5, 'attr_keep')</l>
<l>fit_line_contour_xld (UnionContours1, 'drop', -1, 0, 5, 1, RowBeginC, ColBeginC, RowEndC, ColEndC, NrC, NcC, DistC)</l>
<l>gen_contour_polygon_xld (OrginLineC, [RowBeginC,RowEndC], [ColBeginC,ColEndC])</l>
<l>return ()</l>
</body>
<docu id="get_C_line">
<parameters>
<parameter id="ColBeginC"/>
<parameter id="ColEndC"/>
<parameter id="ColumnL"/>
<parameter id="Image"/>
<parameter id="OrginLineC"/>
<parameter id="RowBeginC"/>
<parameter id="RowEndC"/>
<parameter id="RowL"/>
</parameters>
</docu>
</procedure>
<procedure name="override_get_grayvalue">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="rows" base_type="ctrl" dimension="0"/>
<par name="cols" base_type="ctrl" dimension="0"/>
<par name="phi" base_type="ctrl" dimension="0"/>
<par name="grids" base_type="ctrl" dimension="0"/>
<par name="plane" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="grayvalues" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>grayvalues := []</l>
<l>* open_file ('C:/Users/25001885/Desktop/ZValues.csv', 'output', FileHandle)</l>
<l>for Index := 0 to |rows|-1 by 1</l>
<l>    tempGrayvalues := []</l>
<l>    gen_rectangle2 (Rectangle, rows[Index], cols[Index], phi, grids/3, grids/2)</l>
<l>    get_region_points (Rectangle, Rows, Columns)</l>
<l>    gen_cross_contour_xld (Cross, Rows, Columns, 6, 0.785398)</l>
<l>    get_grayval (Image, Rows, Columns, GrayvalOrgin)</l>
<l>    tuple_sort (GrayvalOrgin, Sorted)</l>
<l>     if (|Sorted|&gt;=9)</l>
<l>        tuple_select_range (Sorted, 4, |Sorted|-4, Grayval)</l>
<l>     else</l>
<l>        tuple_select_range (Sorted, 0, |Sorted|-1, Grayval)</l>
<l>     endif</l>
<l>    if (plane='A')</l>
<l>        for Index1 := 0 to |Grayval|-1 by 1</l>
<l>            if (Grayval[Index1]&gt;-1200 and Grayval[Index1]&lt;-800)</l>
<l>                tempGrayvalues := [tempGrayvalues,Grayval[Index1]]</l>
<l>            endif</l>
<l>        endfor</l>
<l>    elseif (plane='P')</l>
<l>        for Index1 := 0 to |Grayval|-1 by 1</l>
<l>            if (Grayval[Index1]&gt;-3900 and Grayval[Index1]&lt;-3500)</l>
<l>                tempGrayvalues := [tempGrayvalues,Grayval[Index1]]</l>
<l>            endif</l>
<l>        endfor</l>
<l>    elseif (plane='E')</l>
<l>            for Index1 := 0 to |Grayval|-1 by 1</l>
<l>                if (Grayval[Index1]&gt;-3800 and Grayval[Index1]&lt;=-3500)</l>
<l>                    tempGrayvalues := [tempGrayvalues,Grayval[Index1]]</l>
<l>                endif</l>
<l>            endfor</l>
<c></c>
<l>    elseif (plane='F')</l>
<l>        for Index1 := 0 to |Grayval|-1 by 1</l>
<l>            if (Grayval[Index1]&gt;-3000and Grayval[Index1]&lt;2500)</l>
<l>                tempGrayvalues := [tempGrayvalues,Grayval[Index1]]</l>
<l>            endif</l>
<l>        endfor</l>
<l>    endif</l>
<l>    tuple_sort (tempGrayvalues, SortedGrayval)</l>
<l>    if (|SortedGrayval|&gt;=3 and |SortedGrayval|&lt;=5)</l>
<l>        tuple_select (SortedGrayval, [1:|SortedGrayval|-1], SelectedGrayval)</l>
<l>    elseif (|SortedGrayval|&gt;5)</l>
<l>        tuple_select (SortedGrayval, [2:|SortedGrayval|-2], SelectedGrayval)</l>
<l>    else</l>
<l>        SelectedGrayval := SortedGrayval</l>
<l>    endif</l>
<l>*     for Index2 := 0 to |SortedGrayval|-1 by 1</l>
<l>*         fwrite_string (FileHandle, SortedGrayval[Index2]+',')</l>
<l>*     endfor</l>
<l>*     fnew_line (FileHandle)</l>
<l>    tuple_mean (SelectedGrayval, MeanGrayval)</l>
<l>    grayvalues := [grayvalues,MeanGrayval]</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="override_get_grayvalue">
<parameters>
<parameter id="Image"/>
<parameter id="cols"/>
<parameter id="grayvalues"/>
<parameter id="grids"/>
<parameter id="phi"/>
<parameter id="plane">
<default_type>string</default_type>
<type_list>
<item>string</item>
</type_list>
</parameter>
<parameter id="rows"/>
</parameters>
</docu>
</procedure>
<procedure name="analyze_coordinate">
<interface>
<ic>
<par name="Input_x" base_type="ctrl" dimension="0"/>
<par name="Input_y" base_type="ctrl" dimension="0"/>
<par name="Phi" base_type="ctrl" dimension="0"/>
<par name="Row" base_type="ctrl" dimension="0"/>
<par name="Column" base_type="ctrl" dimension="0"/>
<par name="sx" base_type="ctrl" dimension="0"/>
<par name="sy" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Output_x" base_type="ctrl" dimension="0"/>
<par name="Output_y" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>tuple_abs (Input_x*1000, x)</l>
<l>tuple_abs (Input_y*1000, y)</l>
<c>* x轴像素当量即colum方向</c>
<l>a := sx</l>
<c>* y轴像素当量即Row方向</c>
<l>b := sy</l>
<l>if (Phi&gt;=0)</l>
<c>    * C平移延x轴移动距离</c>
<l>    deta_y := (y*cos(Phi)-x*sin(Phi))/b</l>
<c>    * C平移延y轴移动距离</c>
<l>    deta_x := (y*sin(Phi)-x*tan(Phi)*sin(Phi)+x/cos(Phi))/a</l>
<l>endif</l>
<l>if (Phi&lt;0)</l>
<c>    * C,B平移延y轴移动像素距离</c>
<l>    deta_y := (y/cos(Phi)+x*sin(Phi)-y*sin(Phi)*tan(Phi))/b</l>
<c>    * C,B平移延x轴移动像素距离</c>
<l>    deta_x := (x*cos(Phi)-y*sin(Phi))/a</l>
<l>endif</l>
<c>* 8个点的像素坐标，2位y方向补偿</c>
<l>Output_x := Column-deta_x-4</l>
<l>Output_y := Row-deta_y-4</l>
<l>return ()</l>
</body>
<docu id="analyze_coordinate">
<parameters>
<parameter id="Column"/>
<parameter id="Input_x">
<sem_type>any</sem_type>
</parameter>
<parameter id="Input_y">
<sem_type>any</sem_type>
</parameter>
<parameter id="Output_x">
<sem_type>any</sem_type>
</parameter>
<parameter id="Output_y">
<sem_type>any</sem_type>
</parameter>
<parameter id="Phi"/>
<parameter id="Row"/>
<parameter id="sx"/>
<parameter id="sy"/>
</parameters>
</docu>
</procedure>
<procedure name="analyze_flatness">
<interface>
<ic>
<par name="xs" base_type="ctrl" dimension="0"/>
<par name="ys" base_type="ctrl" dimension="0"/>
<par name="zs" base_type="ctrl" dimension="0"/>
<par name="x" base_type="ctrl" dimension="0"/>
<par name="y" base_type="ctrl" dimension="0"/>
<par name="z" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="flatness" base_type="ctrl" dimension="0"/>
<par name="distance" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* 平整度测量</c>
<c>* 3D坐标</c>
<l>X := xs</l>
<l>Y := ys</l>
<l>Z := zs</l>
<c>* 3D坐标转化为3D模型</c>
<l>gen_object_model_3d_from_points (X, Y, Z, ObjectModel3D)</l>
<c>* 3D模型拟合成平面</c>
<l>ParFitting := ['primitive_type','fitting_algorithm','output_xyz_mapping']</l>
<l>ValFitting := ['plane','least_squares','true']</l>
<c>* Apply the fitting</c>
<l>fit_primitives_object_model_3d (ObjectModel3D, ParFitting, ValFitting, ObjectModel3DOutID)</l>
<c>* 获取拟合参数（法向量，平面中心一点）</c>
<l>get_object_model_3d_params (ObjectModel3DOutID, 'primitive_parameter', primitive_parameter)</l>
<l>get_object_model_3d_params (ObjectModel3DOutID, 'center', center)</l>
<c>* 计算平面方程(a,b,c,d)</c>
<l>a := primitive_parameter[0]</l>
<l>b := primitive_parameter[1]</l>
<l>c := primitive_parameter[2]</l>
<l>d := -1*center[0]*a-center[1]*b-center[2]*primitive_parameter[2]</l>
<c>* 平面度计算</c>
<l>minD := 9999</l>
<l>maxD := -9999</l>
<l>for i := 0 to |X|-1 by 1</l>
<l>    D := a*X[i]+b*Y[i]+c*Z[i]+d</l>
<l>    if (minD&gt;D)</l>
<l>        minD := D</l>
<l>    endif</l>
<l>    if (maxD&lt;D)</l>
<l>        maxD := D</l>
<l>    endif</l>
<l>endfor</l>
<l>flatness := (maxD-minD)/1000</l>
<c>* 点到平面距离</c>
<l>X1 := x</l>
<l>Y1 := y</l>
<l>Z1 := z</l>
<l>d1 := a*a+b*b+c*c</l>
<l>tuple_abs (a*X1+b*Y1+c*Z1+d, d2)</l>
<c></c>
<l>distance := d2/d1/1000</l>
<l>return ()</l>
</body>
<docu id="analyze_flatness">
<parameters>
<parameter id="distance"/>
<parameter id="flatness"/>
<parameter id="x"/>
<parameter id="xs"/>
<parameter id="y"/>
<parameter id="ys"/>
<parameter id="z"/>
<parameter id="zs"/>
</parameters>
</docu>
</procedure>
</hdevelop>
